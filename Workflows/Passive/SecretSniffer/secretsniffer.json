{
  "description": "Sniffs Secrets",
  "edition": 2,
  "graph": {
    "edges": [
      {
        "source": {
          "exec_alias": "exec",
          "node_id": 2
        },
        "target": {
          "exec_alias": "exec",
          "node_id": 3
        }
      },
      {
        "source": {
          "exec_alias": "false",
          "node_id": 3
        },
        "target": {
          "exec_alias": "exec",
          "node_id": 1
        }
      },
      {
        "source": {
          "exec_alias": "true",
          "node_id": 3
        },
        "target": {
          "exec_alias": "exec",
          "node_id": 4
        }
      }
    ],
    "nodes": [
      {
        "alias": "passive_end",
        "definition_id": "caido/passive-end",
        "display": {
          "x": 0,
          "y": 200
        },
        "id": 1,
        "inputs": [],
        "name": "Passive End",
        "version": "0.1.0"
      },
      {
        "alias": "on_intercept_response",
        "definition_id": "caido/on-intercept-response",
        "display": {
          "x": 0,
          "y": -60
        },
        "id": 2,
        "inputs": [],
        "name": "On Intercept Response",
        "version": "0.1.0"
      },
      {
        "alias": "in_scope",
        "definition_id": "caido/in-scope",
        "display": {
          "x": 0,
          "y": 40
        },
        "id": 3,
        "inputs": [
          {
            "alias": "request",
            "value": {
              "data": "$on_intercept_response.request",
              "kind": "ref"
            }
          }
        ],
        "name": "In Scope",
        "version": "0.1.0"
      },
      {
        "alias": "javascript",
        "definition_id": "caido/http-code-js",
        "display": {
          "x": 0,
          "y": 120
        },
        "id": 4,
        "inputs": [
          {
            "alias": "request",
            "value": {
              "data": "$on_intercept_response.request",
              "kind": "ref"
            }
          },
          {
            "alias": "response",
            "value": {
              "data": "$on_intercept_response.response",
              "kind": "ref"
            }
          },
          {
            "alias": "code",
            "value": {
              "data": "// SecretSniffer v1.0\n// Author: deathflash / OsmSec\nasync function run(input, sdk) {\n  const { request, response } = input;\n\n  // Get response body as text\n  const responseBody = response.getBody()?.toText();\n  if (!responseBody) {\n    sdk.console.log(\"Response body is empty\");\n    return [];\n  }\n\n  // Define regex patterns and corresponding finding titles\n  const patterns = [\n    {\n      regex: /(A3T[A-Z0-9]{13}|AKIA[0-9A-Z]{16}|AGPA[0-9A-Z]{16}|AIDA[0-9A-Z]{16}|AROA[0-9A-Z]{16}|AIPA[0-9A-Z]{16}|ANPA[0-9A-Z]{16}|ANVA[0-9A-Z]{16}|ASIA[0-9A-Z]{16})/g,\n      title: \"AWS API Key\",\n    },\n    {\n      regex: /(xox[pborsa]-[0-9]{12}-[0-9]{12}-[0-9]{12}-[a-z0-9]{32})/g,\n      title: \"Slack Token\",\n    },\n    // Add more regex patterns as needed\n  ];\n\n  // Object to store findings\n  const findings = {};\n\n  // Iterate over each pattern\n  patterns.forEach(({ regex, title }) => {\n    // Match regex pattern against response body\n    const matches = responseBody.match(regex);\n    \n    if (matches && matches.length > 0) {\n      // Remove duplicates using Set\n      const uniqueMatches = [...new Set(matches)];\n\n      // Generate finding description\n      const findingDescription = `Sniffed ${title}:\\n\\n${uniqueMatches.join('\\n')}`;\n      \n      // Store finding in findings object\n      findings[title] = {\n        title,\n        reporter: \"SecretSniffer\",\n        request,\n        description: findingDescription,\n        severity: \"high\",\n      };\n    } else {\n      sdk.console.log(`No matches found for ${title}`);\n    }\n  });\n\n  // Create findings for each detected pattern\n  for (const title in findings) {\n    if (findings.hasOwnProperty(title)) {\n      const finding = findings[title];\n      await sdk.findings.create(finding);\n    }\n  }\n}\n\nexport { run };\n",
              "kind": "string"
            }
          }
        ],
        "name": "Javascript",
        "version": "0.1.0"
      }
    ]
  },
  "id": "d0bfdc00-dbfb-4a36-8e64-199541892206",
  "kind": "passive",
  "name": "SecretSniffer"
}